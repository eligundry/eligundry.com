---
import * as dateFns from 'date-fns'
import { experienceComponents } from './mdxComponents.tsx'
import type { CollectionEntry } from 'astro:content'

export interface Props {
  experience: CollectionEntry<'resumeExperiences'>
}

const { experience } = Astro.props
const {
  type,
  organization,
  position,
  location,
  website,
  startDate,
  endDate,
  printHide,
} = experience.data
const { Content } = await experience.render()
---

<section
  class:list={[
    'flex',
    'flex-wrap',
    'justify-between',
    'page-break-avoid',
    /* 'order-1', */
    printHide && 'print:hidden',
  ]}
  itemscope
  itemtype={`http://schema.org/${
    type == 'work' ? 'Organization' : 'CollegeOrUniversity'
  }`}
  itemprop={endDate ? 'alumniOf' : 'worksFor'}
>
  <h3 itemprop="name" class="w-full sm:w-1/2 print:w-1/2 m-0 text-base order-1">
    <a href={website} itemprop="url">
      {organization}
    </a>
  </h3>
  <span
    itemscope
    itemtype="https://schema.org/OrganizationRole"
    itemprop="member"
    class:list={[
      'w-full',
      'sm:w-1/2',
      'print:w-1/2',
      'm-0',
      'order-3',
      'sm:order-2',
      'print:order-2',
      'sm:text-right',
      'print:text-right',
      'text-xs',
      'font-mono',
      'self-center',
    ]}
  >
    <meta itemprop="roleName" content={position} />
    <span role="img" aria-label="calendar denoting tenure" class="sm:hidden">
      🗓
    </span>
    <time
      itemprop="startDate"
      datetime={dateFns.formatISO(startDate, { representation: 'date' })}
    >
      {dateFns.format(startDate, 'MMMM yyyy')}
    </time>
    &mdash;
    {
      endDate ? (
        <time
          itemprop="endDate"
          datetime={dateFns.formatISO(endDate, { representation: 'date' })}
        >
          {dateFns.format(endDate, 'MMMM yyyy')}
        </time>
      ) : (
        <span>Present</span>
      )
    }
    <span
      role="img"
      aria-label="calendar denoting tenure"
      class="hidden sm:inline">🗓</span
    >
  </span>
  <h4 class="w-full sm:w-1/2 print:w-1/2 m-0 order-2 print:order-3 sm:order-3">
    {position}
  </h4>
  <address
    itemscope
    itemprop="address"
    itemtype="https://schema.org/PostalAddress"
    class:list={[
      'w-full',
      'sm:w-1/2',
      'print:w-1/2',
      'm-0',
      'order-4',
      'print:order-4',
      'not-italic',
      'sm:text-right',
      'print:text-right',
      'text-xs',
      'font-mono',
      'self-center',
    ]}
  >
    <span role="img" aria-label="pin denoting location on map" class="sm:hidden"
      >📍</span
    >
    {
      location.city && (
        <>
          <span itemprop="addressLocality">{location.city}</span>,
        </>
      )
    }
    <span itemprop="addressRegion">{location.region}</span>
    <span
      role="img"
      aria-label="pin denoting location on map"
      class="hidden sm:inline">📍</span
    >
  </address>
  <Content components={experienceComponents} />
</section>
