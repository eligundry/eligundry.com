---
import { SEO } from 'astro-seo'
import { markdownToTxt } from 'markdown-to-txt'
import { type CollectionEntry, getEntry } from 'astro:content'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import FancyBackground from '../components/FancyBackground/index.astro'
import Tracking from '../components/Tracking.astro'
import config from '../config'
import { getLastModifiedForPath } from '../lib/lastModified'
import '../styles/tailwind.css'
import { getCollection } from 'astro:content'

export interface Props {
  title?: string
  description?: string
  fancyBackgroundPoints?: number
  frontmatter?:
    | CollectionEntry<'blog'>['data']
    | CollectionEntry<'talks'>['data']
  remarkPluginFrontmatter?: Partial<{
    modified: Date
    readingTime: number
  }>
}

const [latestFeeling, modified, about] = await Promise.all([
  getCollection('feelings').then((c) => c[0].data),
  getLastModifiedForPath(Astro.url.pathname),
  getEntry('sections', 'about')?.then((section) =>
    markdownToTxt(section.body).split('\n').slice(2).join(' ')
  ),
])

const {
  title,
  description = about,
  frontmatter,
  fancyBackgroundPoints,
} = Astro.props
let opengraphImage = ''
const opengraphImagePath = frontmatter?.cover?.src ?? config.seoImage

if (opengraphImagePath) {
  opengraphImage = new URL(opengraphImagePath, config.url).toString()
}

if (opengraphImage === config.url) {
  opengraphImage = ''
}
---

<!doctype html>
<html
  lang="en"
  itemscope
  itemtype="https://schema.org/Person"
  itemid="#eli-gundry"
>
  <head>
    <SEO
      charset="utf-8"
      title={title}
      titleTemplate={`%s | ${config.title}`}
      titleDefault={config.title}
      description={description}
      canonical={config.url + Astro.url.pathname}
      openGraph={{
        basic: {
          title: title ?? config.title,
          image: opengraphImage,
          type: 'website',
          url: config.url + Astro.url.pathname,
        },
        article: {
          publishedTime: frontmatter?.date?.toISOString() ?? '',
          modifiedTime: modified.toISOString(),
        },
      }}
      twitter={{
        creator: config.twitter,
        card: 'summary_large_image',
      }}
      extend={{
        meta: [
          { name: 'viewport', content: 'width=device-width, initial-scale=1' },
          { name: 'generator', content: Astro.generator },
        ],
        link: [
          {
            rel: 'alternate',
            type: 'application/rss+xml',
            title: 'Eli Gundry’s Blog',
            href: '/blog.rss',
          },
          {
            rel: 'alternate',
            type: 'application/rss+xml',
            title: 'Eli Gundry’s Feelings',
            href: '/feelings.rss',
          },
          {
            rel: 'icon',
            href: `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${latestFeeling.emoji}</text></svg>`,
          },
        ],
      }}
    />
    <meta itemprop="name" content="Eli Gundry" />
    <meta itemprop="description" content={about} />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Arvo:ital,wght@0,400;0,700;1,400;1,700&family=Fira+Code&family=Lato:ital,wght@0,400;0,700;0,900;1,400;1,700;1,900&display=fallback"
    />
    <Tracking />
    <script is:inline>
      if (localStorage.getItem('theme') === null) {
        const prefersDark =
          window.matchMedia &&
          window.matchMedia('(prefers-color-scheme:dark)').matches
        document.documentElement.setAttribute(
          'data-theme',
          prefersDark ? 'dark' : 'light'
        )
      } else {
        document.documentElement.setAttribute(
          'data-theme',
          localStorage.getItem('theme')
        )
      }
    </script>
    <script>
      const lazyLoadedIframes = document.querySelectorAll(
        'iframe[loading="lazy"][data-src]'
      )
      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // @ts-ignore
            const iframe = entry.target

            // @ts-ignore
            if (!iframe.src && iframe.dataset.src) {
              // @ts-ignore
              iframe.src = iframe.dataset.src
              observer.unobserve(iframe)
            }
          }
        })
      })
      lazyLoadedIframes.forEach((iframe) => {
        observer.observe(iframe)
      })
    </script>
    <slot name="head" />
  </head>
  <body>
    <Header />
    <FancyBackground points={fancyBackgroundPoints}>
      <main
        class:list={[
          'container',
          'grow-0',
          'mx-auto',
          'mt-20',
          'mb-8',
          'print:mt-0',
          'print:mb-0',
          'print:pt-0',
        ]}
      >
        <slot />
      </main>
    </FancyBackground>
    <Footer />
  </body>
</html>
