---
import { getCollection } from 'astro:content'
import dateFns from 'date-fns'
import kebabCase from 'lodash/kebabCase'
import Layout from '../layouts/Layout.astro'
import EmojiText from '../components/EmojiText.astro'

const posts = (await getCollection('blog')).sort((a, b) =>
  dateFns.compareDesc(new Date(a.data.date), new Date(b.data.date))
)
const tags = [
  ...posts.reduce((acc, curr) => {
    curr?.data?.tags?.forEach((tag: string) => acc.add(tag))
    return acc
  }, new Set<string>()),
]
const readingTimes = (
  await Promise.all(
    posts.map(async (post): Promise<[string, number]> => {
      const { remarkPluginFrontmatter } = await post.render()
      return [post.slug, remarkPluginFrontmatter.readingTime ?? 1]
    })
  )
).reduce((acc, [slug, readingTime]) => {
  acc[slug] = readingTime ?? 1
  return acc
}, {} as Record<string, number>)
---

<script>
  window.addEventListener('hashchange', (event) => {
    const url = new URL(event.newURL)
    const hash = url.hash.slice(1)
    const postList = document.getElementById('post-list')

    if (!hash) {
      postList.className = ''
    } else {
      postList.className = `selected-tag-${hash}`
    }
  })
</script>

<style
  set:html={tags
    .map(
      (tag) => `
  #post-list.selected-tag-${tag} > *:not(.tag-${tag}) {
    display: none;
  }
`
    )
    .join('\n')}
></style>

<Layout
  title="Blog"
  description="Thoughts, tutorials, musings, album reviews and everything in between that I have written down."
>
  <div id="post-list" class="paper prose">
    <div class="tags btn-group">
      {
        tags.map((tag) => (
          <a href={`#${kebabCase(tag)}`} class:list={['btn', `tag-${tag}`]}>
            {tag}
          </a>
        ))
      }
      <a href="#" class="btn">Reset</a>
    </div>
    <div>
      {
        posts.map((post) => (
          <article
            itemscope
            itemtype={`https://schema.org/${
              post.collection === 'blog' ? 'BlogPosting' : 'CreativeWork'
            }`}
            class:list={post.data.tags.map((tag) => `tag-${tag}`)}
          >
            <link itemprop="author publisher" href="#eli-gundry" />
            {post.data.readingTime > 0 && (
              <meta
                itemprop="timeRequired"
                content={`PT${post.data.readingTime}`}
              />
            )}
            <h2 itemprop="name headline" class="mb-0">
              <a href={`/${post.collection}/${post.slug}/`} itemprop="url">
                {post.data.title}
              </a>
            </h2>
            <div class="flex flex-row gap-4 [&>*]:m-0">
              <time datetime={post.data.date.toISOString()}>
                <EmojiText label="calendar for the date" emoji="🗓">
                  {dateFns.formatISO(post.data.date, {
                    representation: 'date',
                  })}
                </EmojiText>
              </time>
              <p>
                <EmojiText
                  label="stopwatch denoting time to read article"
                  emoji="⏱"
                >
                  {readingTimes[post.slug]}{' '}
                  {readingTimes[post.slug] > 1 ? 'Minutes' : 'Minute'}
                </EmojiText>
              </p>
            </div>
            <p itemprop="description" class="m-0">
              <EmojiText label="description of the blog post" emoji="📝">
                {post.data.description}
              </EmojiText>
            </p>
          </article>
        ))
      }
    </div>
  </div>
</Layout>
