---
import { getCollection } from 'astro:content'
import dateFns from 'date-fns'
import kebabCase from 'lodash/kebabCase'
import Layout from '../layouts/Layout.astro'
import EmojiText from '../components/EmojiText.astro'
import Excerpt from '../components/Post/Excerpt.astro'

const posts = (await getCollection('blog')).sort((a, b) =>
  dateFns.compareDesc(new Date(a.data.date), new Date(b.data.date))
)
const tags = [
  ...posts.reduce((acc, curr) => {
    curr?.data?.tags?.forEach((tag: string) => acc.add(tag))
    return acc
  }, new Set<string>()),
]
const readingTimes = (
  await Promise.all(
    posts.map(async (post): Promise<[string, number]> => {
      const { remarkPluginFrontmatter } = await post.render()
      return [post.slug, remarkPluginFrontmatter.readingTime ?? 1]
    })
  )
).reduce((acc, [slug, readingTime]) => {
  acc[slug] = readingTime ?? 1
  return acc
}, {} as Record<string, number>)

const renderedPosts = await Promise.all(posts.map((p) => p.render()))
---

<script>
  const postList = document.getElementById('post-list')
  const tagFilterBtns = document.querySelectorAll('.tag-filter .btn')

  const updateTagFilter = (tag: string) => {
    Array.from(postList?.classList.values() ?? []).forEach((cl) => {
      if (cl.startsWith('selected-tag-')) {
        postList?.classList.remove(cl)
      }
    })

    if (tag) {
      postList?.classList.add(`selected-tag-${tag}`, 'tag-selected')
    } else {
      postList?.classList.remove('tag-selected')
    }

    tagFilterBtns.forEach((btn) => {
      if (btn.classList.contains(`tag-${tag}`)) {
        btn.classList.add('btn-accent')
      } else {
        btn.classList.remove('btn-accent')
      }
    })
  }

  window.addEventListener('hashchange', (event) => {
    const url = new URL(event.newURL)
    const hash = url.hash.slice(1)
    updateTagFilter(hash)
  })

  document.addEventListener('DOMContentLoaded', () => {
    const url = new URL(window.location.href)
    const hash = url.hash.slice(1)
    updateTagFilter(hash)
  })
</script>

<style
  set:html={tags
    .map(
      (tag) => `
#post-list.selected-tag-${tag} > #posts  > *:not(.tag-${tag}) {
  display: none;
}
    `
    )
    .join('\n')}
></style>

<style>
  #post-list:not(.tag-selected) .tag-filter .reset {
    display: none;
  }

  #post-list:not(.tag-selected) .tag-filter .btn:nth-last-child(-n + 2) {
    border-top-right-radius: var(--rounded-btn);
    border-bottom-right-radius: var(--rounded-btn);
  }
</style>

<Layout
  title="Blog"
  description="Thoughts, tutorials, musings, album reviews and everything in between that I have written down."
>
  <div id="post-list" class="paper prose">
    <div class="tag-filter btn-group">
      {
        tags.map((tag) => (
          <a
            href={`#${kebabCase(tag)}`}
            class:list={[
              'btn',
              'btn-primary',
              'btn-xs',
              'sm:btn-md',
              'normal-case',
              `tag-${tag}`,
            ]}
          >
            {tag}
          </a>
        ))
      }
      <a
        href="#"
        class:list={[
          'btn',
          'btn-primary',
          'btn-xs',
          'sm:btn-md',
          'lowercase',
          'reset',
        ]}
      >
        Reset
      </a>
    </div>
    <div id="posts" class:list={['flex', 'flex-col', 'gap-y-4', 'mt-4']}>
      {
        posts.map((post, i) => {
          const { Content, remarkPluginFrontmatter } = renderedPosts[i]

          return (
            <article
              itemscope
              itemtype={`https://schema.org/${
                post.collection === 'blog' ? 'BlogPosting' : 'CreativeWork'
              }`}
              class:list={post.data.tags.map((tag) => `tag-${tag}`)}
            >
              <link itemprop="author publisher" href="#eli-gundry" />
              {remarkPluginFrontmatter.readingTime > 0 && (
                <meta
                  itemprop="timeRequired"
                  content={`PT${remarkPluginFrontmatter.readingTime}`}
                />
              )}
              <h2 itemprop="name headline" class="my-0">
                <a href={`/${post.collection}/${post.slug}/`} itemprop="url">
                  {post.data.title}
                </a>
              </h2>
              <div class="flex flex-row gap-4 [&>*]:m-0">
                <time datetime={post.data.date.toISOString()}>
                  <EmojiText label="calendar for the date" emoji="🗓">
                    {dateFns.formatISO(post.data.date, {
                      representation: 'date',
                    })}
                  </EmojiText>
                </time>
                <p>
                  <EmojiText
                    label="stopwatch denoting time to read article"
                    emoji="⏱"
                  >
                    {readingTimes[post.slug]}{' '}
                    {readingTimes[post.slug] > 1 ? 'Minutes' : 'Minute'}
                  </EmojiText>
                </p>
              </div>
              <p itemprop="description" class="m-0">
                <EmojiText label="description of the blog post" emoji="📝">
                  {post.data.description}
                </EmojiText>
              </p>
              <Excerpt>
                <Content />
              </Excerpt>
            </article>
          )
        })
      }
    </div>
  </div>
</Layout>
